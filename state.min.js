(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):global.state=factory()})(this,function(){"use strict";const History=function(initial=[]){this.push(...initial)};History.prototype=new Array;History.prototype.limit=Infinity;History.prototype.clean=(({stack:stack="\nStack not available for "+navigator.userAgent}={})=>{return stack.split("\n").slice(1).filter(one=>one).filter(trace=>!/^_____/.test(trace)).filter(trace=>!/^persistence./.test(trace))});History.prototype.add=function(entry){this.push(Object.assign({},entry,{timestamp:(new Date).getTime(),stack:this.clean(new Error,entry.key==="length")},entry));if(this.length>this.limit){this.splice(this.length-this.limit)}return this};History.prototype.type=function(type){return new History(this.filter(one=>one.type===type))};History.prototype.key=function(key){const current=one=>{const keyLength=key.split(".").length;return one.key.split(".").slice(0,keyLength).join(".")===key};return new History(this.filter(current))};History.prototype.latest=function(ms=Infinity){return new History(this.filter(one=>(new Date).getTime()-one.timestamp<ms))};var history=new History;const persistence={};const key="_____state";const available=()=>typeof window!=="undefined"&&"localStorage"in window;persistence.load=(state=>{if(!available())return;const stored=JSON.parse(localStorage.getItem(key)||"{}");if(!stored.data)return;for(let key in stored.data){state[key]=stored.data[key]}});persistence.save=(data=>{if(!available())return;const timestamp=(new Date).getTime();const serialized=JSON.stringify({timestamp:timestamp,data:data});localStorage.setItem(key,serialized)});const listeners={};const basicTypes=["boolean","number","null","undefined","string"];const _____getProxy=(stack=[])=>(target,property)=>{if(typeof property==="symbol"){return target[property]}if("_____history"===property){return history}if("_____listeners"===property){return listeners}const key=[...stack.map(one=>one.property),property].join(".");if(property in target){history.add({type:"read",key:key});return target[property]}if(/^\$/.test(property)){const key=[...stack.map(one=>one.property),property.slice(1)||"_____root"].join(".");const current=key.split(".").reduce((state,prop)=>state[prop],state);history.add({type:"listen",key:key});listeners[key]=listeners[key]||[];return(callback,def)=>{listeners[key].push(callback);if(callback.setState){return callback}return callback(current)}}};const _____setProxy=(stack=[])=>(target,property,value)=>{if(/^\$/.test(property)){throw new Error("The keys that start by $ are reserved and should not be set manually.")}if(/^\_\_/.test(property)){throw new Error("The keys that start by __ (two underscores) are reserved and should not be set manually.")}const key=[...stack.map(one=>one.property),property].join(".");const type=typeof target[property]==="undefined"?"create":"update";history.add({type:type,key:key,value:value});target[property]=value;persistence.save(state);const proxify=(value,stack)=>{if(basicTypes.includes(typeof value)||value===null){return value}if(Array.isArray(value)){value=value.map((value,property,target)=>{return proxify(value,[...stack,{target:target,property:property,value:value}])})}if(/^\{/.test(JSON.stringify(value))){for(let property in value){const current={target:target,property:property,value:value[property]};value[property]=proxify(value[property],[...stack,current])}}return new Proxy(value,{get:_____getProxy(stack),set:_____setProxy(stack),deleteProperty:_____delProxy(stack)})};target[property]=proxify(value,[...stack,{target:target,property:property,value:value}]);[...stack,{target:target,property:property,value:value}].forEach((one,i,all)=>{const key=all.slice(0,i+1).map(one=>one.property).join(".");if(listeners[key]){const current=key.split(".").reduce((state,prop)=>state[prop],state);listeners[key].forEach(one=>{if(one&&one.setState){return one.setState({__state:Math.random()})}one(current)})}});if(!listeners._____root)return true;listeners._____root.forEach(one=>{if(one&&one.setState){return one.setState({__state:Math.random()})}one(state)});return true};const _____delProxy=(stack=[])=>(target,property)=>{if(/^\$/.test(property)){throw new Error("The keys that start by $ are reserved and should not be set manually.")}if(/^\_\_/.test(property)){throw new Error("The keys that start by __ (two underscores) are reserved and should not be set manually.")}const key=[...stack.map(one=>one.property),property].join(".");history.add({type:"delete",key:key});delete target[property];persistence.save(state);[...stack,{target:target,property:property}].forEach((one,i,all)=>{const key=all.slice(0,i+1).map(one=>one.property).join(".");if(listeners[key]){const current=key.split(".").reduce((state,prop)=>state[prop],state);listeners[key].forEach(one=>one(current))}});if(!listeners._____root)return true;listeners._____root.forEach(one=>{if(one&&one.setState){return one.setState({__state:Math.random()})}one(state)});return true};const state=new Proxy({},{get:_____getProxy(),set:_____setProxy(),deleteProperty:_____delProxy()});persistence.load(state);return state});